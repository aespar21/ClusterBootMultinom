% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_or_results.R
\name{get.or.results}
\alias{get.or.results}
\title{Odds Ratios for Cluster Bootstrapped Multinomial Logistic Regression}
\usage{
get.or.results(coef.matrix, remove.vars = NULL, round.vars = NULL,
  round.digits = NULL, out.strings = NULL)
}
\arguments{
\item{coef.matrix}{Matrix of coefficient estimates, with rows = number of bootstrapped data sets,
columns = number of coefficients.}

\item{remove.vars}{Character vector of variable names to **not** include in calculations/plots.
Defaults to NULL (show all variables).}

\item{round.vars}{Character vector of variable names whose results should be rounded to something
other than two decimal places. Useful for variables with very small changes in odds for one-unit
change in variable. Defaults to NULL.}

\item{round.digits}{Integer; number of digits to round [round.vars] to.}

\item{out.strings}{List of character strings to label outcome comparisons. Defaults to B vs. A,
C vs. A, etc. Note that onus is on the user to supply correct labels.}
}
\value{
Data frame with one record per coefficient, including odds ratio estimate, lower and
upper confidence limits, character string of results (format: "OR (LCL, UCL)") and text
describing comparison.
}
\description{
From a matrix of coefficient estimates from B vglm() model fits on cluster bootstrapped data,
calculate and plot odds ratios and 95% CIs for one-unit change in each variable. Written to be
used within multi.plot.ors(), but can be called explicitly. Note: does not currently support
group effects of variables with nonlinear terms; will calculate one odds ratio per coefficient.
}
\examples{
## Create data frame
df <- data.frame(id = sample(1:20, size = 100, replace = TRUE),
                 x1 = rnorm(n = 100),
                 x2 = rbinom(p = 0.75, n = 100, size = 1),
                 y = sample(LETTERS[1:3], size = 100, replace = TRUE))
df <- df[order(df$id),]
df$time <- unlist(lapply(1:length(unique(df$id)),
                         FUN = function(idnum){ 1:nrow(df[df$id == unique(df$id)[idnum],]) }))

## Using create.sampdata(), generate list of cluster bootstrapped data sets
bootdata.list <- create.sampdata(org.data = df,
                                 id.var = 'id',
                                 n.sets = 25)

## Fit model to original and bootstrapped data frame, saving errors and warnings to .txt file
boot.fits.a <- multi.bootstrap(org.data = df,
                               data.sets = bootdata.list,
                               ref.outcome = grep('A', levels(df$y)),
                               multi.form = as.formula('y ~ x1 + x2'))

## Create matrices of coefficients for all bootstrap fits
boot.matrix.a <- do.call(rbind,
                         lapply(boot.fits.a$boot.models,
                                FUN = function(x){ x@coefficients }))

## Get odds ratios and CIs for x2
ors <- get.or.results(boot.matrix.a, remove.vars = 'x1')
}
\seealso{
\code{\link[VGAM]{vglm}}, which this function assumes you are using;
\code{multi.plot.ors}, which calculates p-values and plots all results using ggplot2.
}

